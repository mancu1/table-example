/**
 * –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏
 */
import { Sheet } from '@/core/sheet'
import type { CellAddress } from '@/core/types'

export class PerformanceTest {
  private sheet: Sheet

  constructor() {
    this.sheet = new Sheet('perf', 'Performance Test')
  }

  /**
   * –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –±–æ–ª—å—à–æ–≥–æ –ª–∏—Å—Ç–∞ —Å —Ä–∞–∑—Ä–µ–∂–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
   */
  async testSparseData(): Promise<void> {
    console.log('üß™ Testing sparse data storage...')
    
    const startTime = performance.now()
    
    // –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç 1,000,000 √ó 16,000
    this.sheet.insertRows(0, 1000000)
    this.sheet.insertCols(0, 16000)
    
    const setupTime = performance.now() - startTime
    console.log(`‚úÖ Setup time: ${setupTime.toFixed(2)}ms`)
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–æ–ª—å–∫–æ 0.1% —è—á–µ–µ–∫ (—Ä–∞–∑—Ä–µ–∂–µ–Ω–Ω–æ—Å—Ç—å)
    const fillStartTime = performance.now()
    const fillCount = Math.floor(1000000 * 16000 * 0.001) // 0.1%
    
    for (let i = 0; i < fillCount; i++) {
      const row = Math.floor(Math.random() * 1000000)
      const col = Math.floor(Math.random() * 16000)
      const address: CellAddress = { 
        row: `row_${row + 1}`, 
        col: `col_${col + 1}` 
      }
      this.sheet.setCell(address, Math.random() * 1000)
    }
    
    const fillTime = performance.now() - fillStartTime
    console.log(`‚úÖ Fill time: ${fillTime.toFixed(2)}ms`)
    console.log(`‚úÖ Memory usage: ${this.sheet.cells.size()} cells`)
    console.log(`‚úÖ Memory efficiency: ${(this.sheet.cells.size() / (1000000 * 16000) * 100).toFixed(4)}%`)
  }

  /**
   * –¢–µ—Å—Ç 2: –í—Å—Ç–∞–≤–∫–∞ —Å—Ç—Ä–æ–∫ –≤ —Å–µ—Ä–µ–¥–∏–Ω—É –±–æ–ª—å—à–æ–≥–æ –ª–∏—Å—Ç–∞
   */
  async testRowInsertion(): Promise<void> {
    console.log('üß™ Testing row insertion in large sheet...')
    
    const startTime = performance.now()
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º 1000 —Å—Ç—Ä–æ–∫ –≤ —Å–µ—Ä–µ–¥–∏–Ω—É
    this.sheet.insertRows(500000, 1000)
    
    const insertTime = performance.now() - startTime
    console.log(`‚úÖ Insert 1000 rows time: ${insertTime.toFixed(2)}ms`)
    console.log(`‚úÖ Total rows: ${this.sheet.rows.getTotalRows()}`)
  }

  /**
   * –¢–µ—Å—Ç 3: –§–æ—Ä–º—É–ª—ã —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
   */
  async testFormulaDependencies(): Promise<void> {
    console.log('üß™ Testing formula dependencies...')
    
    const startTime = performance.now()
    
    // –°–æ–∑–¥–∞–µ–º —Ü–µ–ø–æ—á–∫—É —Ñ–æ—Ä–º—É–ª
    for (let i = 0; i < 1000; i++) {
      const addr1: CellAddress = { row: `row_${i + 1}`, col: 'col_1' }
      const addr2: CellAddress = { row: `row_${i + 2}`, col: 'col_1' }
      
      this.sheet.setCell(addr1, i)
      this.sheet.setFormula(addr2, `=A${i + 1}+1`)
    }
    
    const formulaTime = performance.now() - startTime
    console.log(`‚úÖ Formula creation time: ${formulaTime.toFixed(2)}ms`)
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç
    const recalcStartTime = performance.now()
    this.sheet.recalculate()
    const recalcTime = performance.now() - recalcStartTime
    
    console.log(`‚úÖ Recalculation time: ${recalcTime.toFixed(2)}ms`)
    console.log(`‚úÖ Dependencies: ${this.sheet.deps.getStats().edges}`)
  }

  /**
   * –¢–µ—Å—Ç 4: –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
   */
  async testCircularDependencies(): Promise<void> {
    console.log('üß™ Testing circular dependency detection...')
    
    const addr1: CellAddress = { row: 'row_1', col: 'col_1' }
    const addr2: CellAddress = { row: 'row_2', col: 'col_1' }
    const addr3: CellAddress = { row: 'row_3', col: 'col_1' }
    
    this.sheet.setCell(addr1, 10)
    this.sheet.setFormula(addr2, '=A1+1')
    this.sheet.setFormula(addr3, '=A2+1')
    this.sheet.setFormula(addr1, '=A3+1') // –°–æ–∑–¥–∞–µ–º —Ü–∏–∫–ª
    
    const cycles = this.sheet.deps.detectCycles()
    console.log(`‚úÖ Circular dependencies detected: ${cycles.length}`)
    console.log(`‚úÖ Cycle cells: ${cycles.map(c => `${c.row}:${c.col}`).join(', ')}`)
  }

  /**
   * –¢–µ—Å—Ç 5: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å Canvas —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
   */
  async testCanvasRendering(): Promise<void> {
    console.log('üß™ Testing Canvas rendering performance...')
    
    // –°–æ–∑–¥–∞–µ–º Canvas —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const canvas = document.createElement('canvas')
    canvas.width = 800
    canvas.height = 600
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–Ω–¥–µ—Ä–µ—Ä (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏)
    // const renderer = new CanvasRenderer(canvas, this.sheet)
    
    const startTime = performance.now()
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
    for (let i = 0; i < 100; i++) {
      // renderer.render()
    }
    
    const renderTime = performance.now() - startTime
    console.log(`‚úÖ Canvas render time: ${renderTime.toFixed(2)}ms`)
    console.log(`‚úÖ FPS: ${(1000 / (renderTime / 100)).toFixed(1)}`)
  }

  /**
   * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
   */
  async runAllTests(): Promise<void> {
    console.log('üöÄ Starting performance tests...\n')
    
    try {
      await this.testSparseData()
      console.log('')
      
      await this.testRowInsertion()
      console.log('')
      
      await this.testFormulaDependencies()
      console.log('')
      
      await this.testCircularDependencies()
      console.log('')
      
      await this.testCanvasRendering()
      console.log('')
      
      console.log('‚úÖ All performance tests completed!')
    } catch (error) {
      console.error('‚ùå Performance test failed:', error)
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
if (typeof window !== 'undefined') {
  (window as any).PerformanceTest = PerformanceTest
}
